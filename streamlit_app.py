import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from io import BytesIO
import chardet
from datetime import datetime

# ======================
# üé® –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´
# ======================
st.set_page_config(
    layout="wide",
    page_title="üîÆ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ê—Ç–ª–∞—Å",
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
st.markdown("""
<style>
    .header {
        font-family: 'Arial', sans-serif;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
    }
    .metric-card {
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        background: white;
    }
    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    .positive {
        border-left: 5px solid #2ecc71;
    }
    .negative {
        border-left: 5px solid #e74c3c;
    }
    .neutral {
        border-left: 5px solid #3498db;
    }
</style>
""", unsafe_allow_html=True)

# ======================
# üìÇ –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
# ======================
@st.cache_data
def safe_load_data(file_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        with open(file_name, 'rb') as f:
            rawdata = f.read(10000)
            result = chardet.detect(rawdata)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = [result['encoding'], 'utf-8-sig', 'cp1251']
        for encoding in encodings:
            try:
                df = pd.read_csv(file_name, sep=';', encoding=encoding)
                if not df.empty:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                    df = df.rename(columns=lambda x: x.strip())
                    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
                        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
                    df['Name'] = df['Name'].str.strip()
                    return df
            except:
                continue
        return None
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}")
        return None

def load_all_datasets():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    data_files = {
        "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": "Ch_1_6.csv",
        "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": "Ch_3_18.csv",
        "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": "Ch_5_18.csv",
        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": "Pop_3_79.csv",
        "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": "RPop.csv",
        "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "Investment.csv"
    }
    
    loaded_data = {}
    for name, file in data_files.items():
        with st.spinner(f'–ó–∞–≥—Ä—É–∑–∫–∞ {name}...'):
            df = safe_load_data(file)
            if df is not None and not df.empty:
                loaded_data[name] = df
            else:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file}")
                return None
    return loaded_data

# ======================
# üìä –§–£–ù–ö–¶–ò–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
# ======================
def create_metric_card(value, label, delta=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –º–µ—Ç—Ä–∏–∫–æ–π"""
    delta_class = "positive" if (delta and delta >= 0) else "negative" if delta else "neutral"
    st.markdown(f"""
    <div class="metric-card {delta_class}">
        <h3 style="margin:0; color: #7f8c8d">{label}</h3>
        <h1 style="margin:0">{value}</h1>
        {f'<p style="margin:0; color: {"#2ecc71" if delta >=0 else "#e74c3c"}">{delta:+,.0f}</p>' if delta is not None else ''}
    </div>
    """, unsafe_allow_html=True)

def plot_timeseries(years, values, topic, color, forecast_years=None, forecast_values=None):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
    fig = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    fig.add_trace(go.Scatter(
        x=years, y=values,
        name="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        line=dict(color=color, width=4),
        mode='lines+markers',
        hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
    if forecast_years and forecast_values:
        fig.add_trace(go.Scatter(
            x=forecast_years, y=forecast_values,
            name="–ü—Ä–æ–≥–Ω–æ–∑",
            line=dict(color=color, width=3, dash='dot'),
            hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
        ))
    
    fig.update_layout(
        title=f"üìà –î–∏–Ω–∞–º–∏–∫–∞: {topic}",
        xaxis_title="–ì–æ–¥",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        height=500,
        hovermode="x unified",
        template="plotly_white"
    )
    return fig

# ======================
# üìå –û–°–ù–û–í–ù–û–ô –ö–û–î
# ======================
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = load_all_datasets()
    if not data:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    # ======================
    # üéõÔ∏è –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    # ======================
    with st.sidebar:
        st.title("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        st.markdown("---")
        
        # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
        locations = data["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]['Name'].unique()
        selected_location = st.selectbox(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é:",
            locations,
            index=0
        )
        
        # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        topics = list(data.keys())[:-1]  # –í—Å–µ –∫—Ä–æ–º–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        selected_topic = st.selectbox(
            "üìä –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
            topics,
            index=0
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        st.markdown("---")
        st.markdown("**üîÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:**")
        show_forecast = st.checkbox("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", True)
        show_correlation = st.checkbox("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", True)
        show_extremes = st.checkbox("–¢–æ–ø-5 –∏ –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥", True)
    
    # ======================
    # üìä –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
    # ======================
    st.markdown(f"""
    <div class="header">
        <h1>üîÆ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ê—Ç–ª–∞—Å</h1>
        <h3>üìç {selected_location}</h3>
        <p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # 1. –ö–ê–†–¢–û–ß–ö–ò –° –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò
    current_year = '2024'
    prev_year = '2023'
    df_topic = data[selected_topic]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        location_data = df_topic[df_topic['Name'] == selected_location]
        if location_data.empty:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_location}")
        else:
            current_val = location_data[current_year].values[0]
            prev_val = location_data[prev_year].values[0]
            delta_val = current_val - prev_val
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            cols = st.columns(3)
            with cols[0]:
                create_metric_card(f"{current_val:,.0f}", f"{selected_topic} ({current_year})")
            with cols[1]:
                create_metric_card(f"{delta_val:+,.0f}", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥", delta_val)
            with cols[2]:
                delta_pct = (delta_val / prev_val) * 100 if prev_val != 0 else 0
                create_metric_card(f"{delta_pct:+.1f}%", "–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è", delta_pct)
            
            # 2. –ì–†–ê–§–ò–ö –î–ò–ù–ê–ú–ò–ö–ò –° –ü–†–û–ì–ù–û–ó–û–ú
            years = [str(year) for year in range(2019, 2025)]
            values = location_data[years].values.flatten()
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            forecast_years, forecast_values = None, None
            if show_forecast and len(years) == len(values):
                try:
                    X = np.array(range(len(years))).reshape(-1, 1)
                    model = LinearRegression()
                    model.fit(X, values)
                    
                    forecast_years = [str(year) for year in range(2025, 2030)]
                    X_future = np.array(range(len(years), len(years)+5)).reshape(-1, 1)
                    forecast_values = model.predict(X_future)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig = plot_timeseries(
                years, values, 
                selected_topic, "#3498db",
                forecast_years, forecast_values
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # 3. –¢–û–ü-5 –ò –ê–ù–¢–ò–†–ï–ô–¢–ò–ù–ì
            if show_extremes:
                st.subheader("üèÜ –¢–æ–ø-5 –∏ –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥")
                
                try:
                    last_year_data = df_topic[['Name', current_year]].dropna()
                    top5 = last_year_data.nlargest(5, current_year)
                    bottom5 = last_year_data.nsmallest(5, current_year)
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                    fig1 = px.bar(
                        top5, x=current_year, y='Name',
                        orientation='h',
                        title=f"–¢–æ–ø-5 –ø–æ {selected_topic}",
                        color_discrete_sequence=["#27ae60"]
                    )
                    
                    fig2 = px.bar(
                        bottom5, x=current_year, y='Name',
                        orientation='h',
                        title="–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ 5 —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
                        color_discrete_sequence=["#e74c3c"]
                    )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
                    col1, col2 = st.columns(2)
                    with col1:
                        st.plotly_chart(fig1, use_container_width=True)
                    with col2:
                        st.plotly_chart(fig2, use_container_width=True)
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {str(e)}")
            
            # 4. –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ò –° –ò–ù–í–ï–°–¢–ò–¶–ò–Ø–ú–ò
            if show_correlation and selected_topic != "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
                st.subheader("üí° –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
                
                try:
                    df_invest = data["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
                    merged_df = pd.merge(
                        df_topic, df_invest,
                        on='Name',
                        suffixes=('_demo', '_invest')
                    )
                    if not merged_df.empty:
                        last_year = current_year
                        x_col = f"{last_year}_demo"
                        y_col = f"{last_year}_invest"
                        
                        if x_col in merged_df.columns and y_col in merged_df.columns:
                            # Scatter plot
                            fig = px.scatter(
                                merged_df,
                                x=x_col,
                                y=y_col,
                                trendline="ols",
                                hover_name="Name",
                                labels={
                                    x_col: f"{selected_topic}",
                                    y_col: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
                                }
                            )
                            
                            # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
                            if selected_location in merged_df['Name'].values:
                                selected_point = merged_df[merged_df['Name'] == selected_location]
                                fig.add_trace(go.Scatter(
                                    x=selected_point[x_col],
                                    y=selected_point[y_col],
                                    mode='markers',
                                    marker=dict(size=12, color='red'),
                                    name=selected_location
                                ))
                            
                            fig.update_layout(height=500)
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                            corr = merged_df[x_col].corr(merged_df[y_col])
                            st.info(f"""
                            **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏**: {corr:.2f}
                            - –û—Ç 0.7 –¥–æ 1.0: –°–∏–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è —Å–≤—è–∑—å
                            - –û—Ç 0.3 –¥–æ 0.7: –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å
                            - –û—Ç -0.3 –¥–æ 0.3: –°–ª–∞–±–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å
                            - –û—Ç -1.0 –¥–æ -0.7: –°–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                            """)
                        else:
                            st.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")
    
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    # 5. –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
    with st.expander("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        try:
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_topic.to_excel(writer, sheet_name=selected_topic[:30])
                data["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"].to_excel(writer, sheet_name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (Excel)",
                data=output.getvalue(),
                file_name="–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è_–∏_–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

if __name__ == "__main__":
    main()
