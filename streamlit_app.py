import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from io import BytesIO
import chardet  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    with open(file_name, 'rb') as f:
        rawdata = f.read()
        result = chardet.detect(rawdata)
    
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        try:
            df = pd.read_csv(file_name, sep=';', encoding='utf-8-sig')
        except:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        ch_1_6 = load_data('Ch_1_6.csv')
        ch_3_18 = load_data('Ch_3_18.csv')
        ch_5_18 = load_data('Ch_5_18.csv')
        pop_3_79 = load_data('Pop_3_79.csv')
        rpop = load_data('RPop.csv')
        investments = load_data('Investment.csv')
except Exception as e:
    st.error(f"""–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
            1. –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
            2. –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç:
               - Ch_1_6.csv
               - Ch_3_18.csv
               - Ch-5-18.csv
               - Pop_3_79.csv
               - RPop.csv
               - Investment.csv""")
    st.stop()

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö —Å —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4", "üë∂"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e", "üßí"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c", "üë¶"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728", "üë©"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd", "üè†"),
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": (investments, "#17becf", "üí∞")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
}

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    selected_location = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:",
        ch_1_6['Name'].unique(),
        index=0
    )
    
    selected_topic = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
        list(data_dict.keys())[:-1],  # –í—Å–µ –∫—Ä–æ–º–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        format_func=lambda x: f"{data_dict[x][2]} {x}"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
    )
    
    analysis_options = st.multiselect(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:",
        ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏"],
        default=["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏"]
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"{data_dict[selected_topic][2]} –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {selected_location}")

# 1. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–Ω–∞–º–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
current_year = '2024'
prev_year = '2023'
df_topic, color, icon = data_dict[selected_topic]

try:
    current_val = df_topic[df_topic['Name'] == selected_location][current_year].values[0]
    prev_val = df_topic[df_topic['Name'] == selected_location][prev_year].values[0]
    delta_val = current_val - prev_val
    delta_pct = (delta_val / prev_val) * 100 if prev_val != 0 else 0
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(
            label=f"{icon} {selected_topic} ({current_year})",
            value=f"{current_val:,.0f}",
            delta_color="normal"
        )
    with col2:
        st.metric(
            label="üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥",
            value=f"{delta_val:+,.0f}",
            delta_color="inverse" if delta_val < 0 else "normal"
        )
    with col3:
        st.metric(
            label="üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            value=f"{delta_pct:+.1f}%",
            delta_color="inverse" if delta_pct < 0 else "normal"
        )
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {str(e)}")

# 2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
years = [str(year) for year in range(2019, 2025)]
values = df_topic[df_topic['Name'] == selected_location][years].values.flatten()

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=years, y=values,
    name="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
    line=dict(color=color, width=4),
    hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
))

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
if "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç" in analysis_options:
    try:
        X = np.array(range(len(years))).reshape(-1, 1)
        model = LinearRegression()
        model.fit(X, values)
        
        future_years = [str(year) for year in range(2025, 2030)]
        X_future = np.array(range(len(years), len(years)+5)).reshape(-1, 1)
        forecast = model.predict(X_future)
        
        fig.add_trace(go.Scatter(
            x=future_years, y=forecast,
            name="–ü—Ä–æ–≥–Ω–æ–∑",
            line=dict(dash='dot', color=color, width=3),
            hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        residuals = values - model.predict(X)
        stdev = np.std(residuals)
        fig.add_trace(go.Scatter(
            x=future_years,
            y=forecast + 1.96*stdev,
            fill=None,
            mode='lines',
            line=dict(width=0),
            showlegend=False,
            hoverinfo='skip'
        ))
        fig.add_trace(go.Scatter(
            x=future_years,
            y=forecast - 1.96*stdev,
            fill='tonexty',
            mode='lines',
            line=dict(width=0),
            name="95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
            opacity=0.2
        ))
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

fig.update_layout(
    title=f"{icon} –î–∏–Ω–∞–º–∏–∫–∞: {selected_topic}",
    xaxis_title="–ì–æ–¥",
    yaxis_title="–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å" if selected_topic != "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏" else "–†—É–±–ª–µ–π",
    height=500,
    hovermode="x unified",
    template="plotly_white"
)
st.plotly_chart(fig, use_container_width=True)

# 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
if "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏" in analysis_options and selected_topic != "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
    st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
    
    df_invest = data_dict["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"][0]
    merged_df = pd.merge(
        df_topic, df_invest,
        on='Name',
        suffixes=('_demo', '_invest')
    )
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–¥
    last_year = '2024'
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(merged_df[[f"{last_year}_demo", f"{last_year}_invest"]])
    merged_df["scaled_demo"] = scaled_data[:, 0]
    merged_df["scaled_invest"] = scaled_data[:, 1]
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    fig_corr = px.scatter(
        merged_df,
        x=f"{last_year}_demo",
        y=f"{last_year}_invest",
        trendline="ols",
        hover_name="Name",
        labels={
            f"{last_year}_demo": f"{selected_topic} ({last_year})",
            f"{last_year}_invest": f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ({last_year})"
        },
        color_discrete_sequence=[color]
    )
    
    # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
    selected_data = merged_df[merged_df['Name'] == selected_location]
    fig_corr.add_trace(go.Scatter(
        x=selected_data[f"{last_year}_demo"],
        y=selected_data[f"{last_year}_invest"],
        name=selected_location,
        mode='markers',
        marker=dict(size=12, color='red')
    ))
    
    fig_corr.update_layout(height=600)
    st.plotly_chart(fig_corr, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    fig_comparison = go.Figure()
    fig_comparison.add_trace(go.Bar(
        x=merged_df["Name"],
        y=merged_df["scaled_demo"],
        name=f"{selected_topic} (–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ)",
        marker_color=color
    ))
    fig_comparison.add_trace(go.Bar(
        x=merged_df["Name"],
        y=merged_df["scaled_invest"],
        name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ)",
        marker_color="#17becf"
    ))
    fig_comparison.update_layout(
        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π",
        barmode='group',
        height=600,
        xaxis_title="–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç",
        yaxis_title="–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        xaxis={'categoryorder':'total descending'}
    )
    st.plotly_chart(fig_comparison, use_container_width=True)
    
    # –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    corr_coef = merged_df[f"{last_year}_demo"].corr(merged_df[f"{last_year}_invest"])
    st.info(f"""
        **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞**: {corr_coef:.2f}
        - 1.0: –ü–æ–ª–Ω–∞—è –ø—Ä—è–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        - 0.0: –ù–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        - -1.0: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    """)

# 4. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
with st.expander("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", expanded=False):
    tab1, tab2 = st.tabs(["CSV", "Excel"])
    
    with tab1:
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=df_topic.to_csv(index=False).encode('utf-8'),
            file_name=f"{selected_topic.replace(' ', '_')}.csv",
            mime="text/csv"
        )
        
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=investments.to_csv(index=False).encode('utf-8'),
            file_name="investment_data.csv",
            mime="text/csv"
        )
    
    with tab2:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_topic.to_excel(writer, sheet_name=selected_topic[:30])
            investments.to_excel(writer, sheet_name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (Excel)",
            data=output.getvalue(),
            file_name="–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è_–∏_–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
