import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from io import BytesIO
import chardet

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
# –î–æ–±–∞–≤–∏–º CSS-–∞–Ω–∏–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
st.markdown("""
<style>
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.03); }
    100% { transform: scale(1); }
}
</style>
""", unsafe_allow_html=True)
# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(file_name, sep=';', encoding='utf-8-sig')
        except:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        data_sources = {
            "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": 'Ch_1_6.csv',
            "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": 'Ch_3_18.csv', 
            "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": 'Ch_5_18.csv',
            "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": 'Pop_3_79.csv',
            "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": 'RPop.csv',
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": 'Investment.csv'
        }
        
        loaded_data = {}
        for name, file in data_sources.items():
            loaded_data[name] = load_data(file)
            
        ch_1_6 = loaded_data["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]
        ch_3_18 = loaded_data["–î–µ—Ç–∏ 3-18 –ª–µ—Ç"]
        ch_5_18 = loaded_data["–î–µ—Ç–∏ 5-18 –ª–µ—Ç"]
        pop_3_79 = loaded_data["–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç"]
        rpop = loaded_data["–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]
        investments = loaded_data["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]

except Exception as e:
    st.error(f"""–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
            1. –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
            2. –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:
               - Ch_1_6.csv
               - Ch_3_18.csv
               - Ch-5-18.csv
               - Pop_3_79.csv
               - RPop.csv
               - Investment.csv""")
    st.stop()

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4", "üë∂"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e", "üßí"), 
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c", "üë¶"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728", "üë©"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd", "üè†"),
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": (investments, "#17becf", "üí∞")
}

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    selected_location = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:",
        ch_1_6['Name'].unique(),
        index=0
    )
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    selected_topic = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
        list(data_dict.keys())[:-1],  # –í—Å–µ –∫—Ä–æ–º–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        format_func=lambda x: f"{data_dict[x][2]} {x}"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    analysis_options = st.multiselect(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:",
        ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏"],
        default=["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏"]
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"{data_dict[selected_topic][2]} –ê–Ω–∞–ª–∏–∑: {selected_location}")

# 1. –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
current_year = '2024'
prev_year = '2023'
    ############################################ –í —Ä–∞–∑–¥–µ–ª –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–æ–±–∞–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é
with cols[0]:
    st.markdown(f"""
    <div style="animation: pulse 2s infinite; border-left: 5px solid {color}; padding: 10px">
        <h3 style="margin:0">{icon} {selected_topic}</h3>
        <h1 style="margin:0">{current_val:,.0f}</h1>
    </div>
    """, unsafe_allow_html=True)
    ######################################################
try:
    df_topic, color, icon = data_dict[selected_topic]
    current_val = df_topic[df_topic['Name'] == selected_location][current_year].values[0]
    prev_val = df_topic[df_topic['Name'] == selected_location][prev_year].values[0]
    delta_val = current_val - prev_val
    delta_pct = (delta_val / prev_val) * 100 if prev_val != 0 else 0
    
    cols = st.columns(3)
    with cols[0]:
        st.metric(f"{icon} {selected_topic} ({current_year})", 
                 f"{current_val:,.0f}")
    with cols[1]:
        st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥", 
                 f"{delta_val:+,.0f}",
                 delta_color="inverse" if delta_val < 0 else "normal")
    with cols[2]:
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                 f"{delta_pct:+.1f}%",
                 delta_color="inverse" if delta_pct < 0 else "normal")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {str(e)}")

# 2. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
years = [str(year) for year in range(2019, 2025)]
try:
    values = df_topic[df_topic['Name'] == selected_location][years].values.flatten()
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=years, y=values,
        name="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        line=dict(color=color, width=4),
        hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
    ))

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    if "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç" in analysis_options:
        X = np.array(range(len(years))).reshape(-1, 1)
        model = LinearRegression()
        model.fit(X, values)
        
        future_years = [str(year) for year in range(2025, 2030)]
        X_future = np.array(range(len(years), len(years)+5)).reshape(-1, 1)
        forecast = model.predict(X_future)
        
        fig.add_trace(go.Scatter(
            x=future_years, y=forecast,
            name="–ü—Ä–æ–≥–Ω–æ–∑",
            line=dict(dash='dot', color=color, width=3),
            hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
        ))
    
    fig.update_layout(
        title=f"{icon} –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
        xaxis_title="–ì–æ–¥",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        height=500,
        hovermode="x unified"
    )
    st.plotly_chart(fig, use_container_width=True)

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

# 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
if "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏" in analysis_options and selected_topic != "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
    st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
    
    try:
        df_invest = data_dict["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"][0]
        merged_df = pd.merge(
            df_topic, df_invest,
            on='Name',
            suffixes=('_demo', '_invest')
        )
        
        last_year = '2024'
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        fig_corr = px.scatter(
            merged_df,
            x=f"{last_year}_demo",
            y=f"{last_year}_invest",
            trendline="ols",
            hover_name="Name",
            labels={
                f"{last_year}_demo": f"{selected_topic}",
                f"{last_year}_invest": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
            },
            color_discrete_sequence=[color]
        )
        
        # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        if selected_location in merged_df['Name'].values:
            selected_data = merged_df[merged_df['Name'] == selected_location]
            fig_corr.add_trace(go.Scatter(
                x=selected_data[f"{last_year}_demo"],
                y=selected_data[f"{last_year}_invest"],
                name=selected_location,
                mode='markers',
                marker=dict(size=12, color='red')
            ))
        
        fig_corr.update_layout(height=500)
        st.plotly_chart(fig_corr, use_container_width=True)
        
        # –†–∞—Å—á—ë—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        corr_coef = merged_df[f"{last_year}_demo"].corr(
            merged_df[f"{last_year}_invest"]
        )
        
        st.info(f"""
        **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏**: {corr_coef:.2f}
        - –û—Ç 0.7 –¥–æ 1.0: –°–∏–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è —Å–≤—è–∑—å
        - –û—Ç 0.3 –¥–æ 0.7: –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å
        - –û—Ç -0.3 –¥–æ 0.3: –°–ª–∞–±–∞—è —Å–≤—è–∑—å
        - –û—Ç -1.0 –¥–æ -0.7: –°–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        """)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")

# 4. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
with st.expander("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
    tab1, tab2 = st.tabs(["CSV", "Excel"])
    
    with tab1:
        st.download_button(
            "–°–∫–∞—á–∞—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
            df_topic.to_csv(index=False).encode('utf-8'),
            f"{selected_topic}.csv",
            "text/csv"
        )
    
    with tab2:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_topic.to_excel(writer, sheet_name=selected_topic[:30])
            investments.to_excel(writer, sheet_name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
        st.download_button(
            "–°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (Excel)",
            output.getvalue(),
            "–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è_–∏_–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.xlsx",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
