import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except UnicodeDecodeError:
        df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
try:
    ch_1_6 = load_data('Ch_1_6.csv')
    ch_3_18 = load_data('Ch_3_18.csv')
    ch_5_18 = load_data('Ch_5_18.csv')
    pop_3_79 = load_data('Pop_3_79.csv')
    rpop = load_data('RPop.csv')
    investments = load_data('Investment.csv')  # –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd"),
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": (investments, "#17becf")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
}

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    selected_location = st.selectbox("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:", ch_1_6['Name'].unique())
    selected_topic = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è:", list(data_dict.keys())[:-1])
    show_forecast = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", True)
    show_correlation = st.checkbox("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", True)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"üìä {selected_location}: –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

# 1. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–Ω–∞–º–∏–∫–∏
current_year = '2024'
prev_year = '2023'
df_topic = data_dict[selected_topic][0]
current_val = df_topic[df_topic['Name'] == selected_location][current_year].values[0]
prev_val = df_topic[df_topic['Name'] == selected_location][prev_year].values[0]
delta_pct = ((current_val - prev_val) / prev_val) * 100

col1, col2, col3 = st.columns(3)
with col1:
    st.metric(f"{selected_topic} ({current_year})", f"{current_val:,.0f} —á–µ–ª.")
with col2:
    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥", f"{current_val - prev_val:+,.0f} —á–µ–ª.")
with col3:
    st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è", f"{delta_pct:+.1f}%")

# 2. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
years = [str(year) for year in range(2019, 2025)]
values = df_topic[df_topic['Name'] == selected_location][years].values.flatten()

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=years, y=values, 
    name="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
    line=dict(width=4)
))

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
if show_forecast:
    X = np.array(range(len(years))).reshape(-1, 1)
    model = LinearRegression()
    model.fit(X, values)
    
    future_years = [str(year) for year in range(2025, 2029)]
    X_future = np.array(range(len(years), len(years)+4)).reshape(-1, 1)
    forecast = model.predict(X_future)
    
    fig.add_trace(go.Scatter(
        x=future_years, y=forecast,
        name="–ü—Ä–æ–≥–Ω–æ–∑",
        line=dict(dash='dot', width=3)
    ))

fig.update_layout(
    title=f"–î–∏–Ω–∞–º–∏–∫–∞: {selected_topic}",
    height=500,
    hovermode="x unified"
)
st.plotly_chart(fig, use_container_width=True)

# 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
if show_correlation:
    st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scatter plot
    df_invest = data_dict["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"][0]
    merged_df = pd.merge(
        df_topic, df_invest, 
        on='Name', 
        suffixes=('_pop', '_invest')
    )
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–¥
    last_year = '2024'
    fig_scatter = px.scatter(
        merged_df, 
        x=f"{last_year}_pop", 
        y=f"{last_year}_invest",
        hover_data=['Name'],
        trendline="ols",
        labels={
            f"{last_year}_pop": f"{selected_topic}, —á–µ–ª.",
            f"{last_year}_invest": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä—É–±."
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
    selected_point = merged_df[merged_df['Name'] == selected_location]
    fig_scatter.add_trace(go.Scatter(
        x=selected_point[f"{last_year}_pop"],
        y=selected_point[f"{last_year}_invest"],
        name=selected_location,
        marker=dict(size=12, color='red')
    ))
    
    fig_scatter.update_layout(height=600)
    st.plotly_chart(fig_scatter, use_container_width=True)
    
    # –†–∞—Å—á—ë—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    corr = merged_df[f"{last_year}_pop"].corr(merged_df[f"{last_year}_invest"])
    st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É {selected_topic.lower()} –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏: **{corr:.2f}**")

# 4. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
with st.expander("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_topic.to_excel(writer, sheet_name="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è")
        investments.to_excel(writer, sheet_name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (Excel)",
        output.getvalue(),
        "–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è_–∏_–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.xlsx",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
