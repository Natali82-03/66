import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from io import BytesIO
import chardet
from datetime import datetime

# ======================
# üé® –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ò–õ–ï–ô
# ======================
st.set_page_config(
    layout="wide",
    page_title="üîÆ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ê—Ç–ª–∞—Å –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
    page_icon="üìä"
)

# CSS-–∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.03); }
    100% { transform: scale(1); }
}
.card {
    animation: fadeIn 1s ease-in;
    border-radius: 10px;
    padding: 15px;
    margin: 10px 0;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}
.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}
.header {
    font-family: 'Arial', sans-serif;
    color: #2c3e50;
    text-align: center;
    margin-bottom: 30px;
}
</style>
""", unsafe_allow_html=True)

# ======================
# üìÇ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ======================
@st.cache_data
def load_data(file_name):
    """–£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    
    encodings = [result['encoding'], 'utf-8-sig', 'cp1251']
    for encoding in encodings:
        try:
            df = pd.read_csv(file_name, sep=';', encoding=encoding)
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
            df = df.rename(columns=lambda x: x.strip())
            if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
                df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
            df['Name'] = df['Name'].str.strip()
            return df
        except Exception as e:
            continue
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {file_name}")
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
data_files = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": "Ch_1_6.csv",
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": "Ch_3_18.csv",
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": "Ch_5_18.csv",
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": "Pop_3_79.csv",
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": "RPop.csv",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "Investment.csv"
}

try:
    with st.spinner('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'):
        loaded_data = {}
        for name, file in data_files.items():
            if df := load_data(file):
                loaded_data[name] = df
            else:
                st.error(f"–§–∞–π–ª {file} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                st.stop()
except Exception as e:
    st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    st.stop()

# ======================
# üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê
# ======================
with st.sidebar:
    st.title("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    selected_location = st.selectbox(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é:",
        loaded_data["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]['Name'].unique(),
        index=0
    )
    
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    selected_topic = st.selectbox(
        "üìä –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
        list(loaded_data.keys())[:-1],  # –í—Å–µ –∫—Ä–æ–º–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        format_func=lambda x: f"{'üë∂üßíüë¶üë©üè†'[list(loaded_data.keys()).index(x)]} {x}"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    st.markdown("---")
    st.markdown("**üîÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:**")
    show_forecast = st.checkbox("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç", True)
    show_correlation = st.checkbox("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", True)
    show_extremes = st.checkbox("–¢–æ–ø-5 –∏ –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥", True)

# ======================
# üìä –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ======================
st.markdown(f"""
<div class="header">
    <h1>üîÆ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ê—Ç–ª–∞—Å</h1>
    <h3>üìç {selected_location}</h3>
    <p>{datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
</div>
""", unsafe_allow_html=True)

# 1. –ö–ê–†–¢–û–ß–ö–ò –° –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò
current_year = '2024'
prev_year = '2023'
df_topic = loaded_data[selected_topic]

try:
    current_val = df_topic[df_topic['Name'] == selected_location][current_year].values[0]
    prev_val = df_topic[df_topic['Name'] == selected_location][prev_year].values[0]
    delta_val = current_val - prev_val
    delta_pct = (delta_val / prev_val) * 100 if prev_val != 0 else 0
    
    cols = st.columns(3)
    metrics = [
        (f"{current_val:,.0f}", f"{selected_topic} ({current_year})", "#3498db"),
        (f"{delta_val:+,.0f}", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥", "#2ecc71" if delta_val >=0 else "#e74c3c"),
        (f"{delta_pct:+.1f}%", "–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è", "#2ecc71" if delta_pct >=0 else "#e74c3c")
    ]
    
    for i, (value, label, color) in enumerate(metrics):
        with cols[i]:
            st.markdown(f"""
            <div class="card" style="border-left: 5px solid {color}">
                <h3 style="margin:0">{label}</h3>
                <h1 style="margin:0">{value}</h1>
            </div>
            """, unsafe_allow_html=True)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# 2. –ì–†–ê–§–ò–ö –î–ò–ù–ê–ú–ò–ö–ò –° –ü–†–û–ì–ù–û–ó–û–ú
years = [str(year) for year in range(2019, 2025)]
try:
    values = df_topic[df_topic['Name'] == selected_location][years].values.flatten()
    
    fig = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    fig.add_trace(go.Scatter(
        x=years, y=values,
        name="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        line=dict(width=4),
        marker=dict(size=8),
        hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    if show_forecast:
        X = np.array(range(len(years))).reshape(-1, 1)
        model = LinearRegression()
        model.fit(X, values)
        
        future_years = [str(year) for year in range(2025, 2030)]
        X_future = np.array(range(len(years), len(years)+5)).reshape(-1, 1)
        forecast = model.predict(X_future)
        
        fig.add_trace(go.Scatter(
            x=future_years, y=forecast,
            name="–ü—Ä–æ–≥–Ω–æ–∑",
            line=dict(dash='dot', width=3),
            hovertemplate="<b>%{x}</b><br>%{y:,.0f}<extra></extra>"
        ))
    
    fig.update_layout(
        title=f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è: {selected_topic}",
        xaxis_title="–ì–æ–¥",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        height=500,
        hovermode="x unified",
        template="plotly_white",
        showlegend=True
    )
    st.plotly_chart(fig, use_container_width=True)

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

# 3. –¢–û–ü-5 –ò –ê–ù–¢–ò–†–ï–ô–¢–ò–ù–ì
if show_extremes:
    st.subheader("üèÜ –¢–æ–ø-5 –∏ –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥")
    
    try:
        last_year = '2024'
        df_topic_sorted = df_topic.sort_values(last_year, ascending=False)
        
        # –¢–æ–ø-5
        top5 = df_topic_sorted.head(5)[['Name', last_year]]
        # –ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥
        bottom5 = df_topic_sorted.tail(5)[['Name', last_year]]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig_top = px.bar(
            top5, 
            x=last_year, 
            y='Name',
            orientation='h',
            title="–¢–æ–ø-5 —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
            labels={last_year: "–ó–Ω–∞—á–µ–Ω–∏–µ", "Name": ""},
            color_discrete_sequence=["#27ae60"]
        )
        
        fig_bottom = px.bar(
            bottom5,
            x=last_year,
            y='Name',
            orientation='h',
            title="–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ 5 —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π",
            labels={last_year: "–ó–Ω–∞—á–µ–Ω–∏–µ", "Name": ""},
            color_discrete_sequence=["#e74c3c"]
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(fig_top, use_container_width=True)
        with col2:
            st.plotly_chart(fig_bottom, use_container_width=True)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {str(e)}")

# 4. –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ò –° –ò–ù–í–ï–°–¢–ò–¶–ò–Ø–ú–ò
if show_correlation and selected_topic != "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
    st.subheader("üí° –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
    
    try:
        df_invest = loaded_data["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
        merged_df = pd.merge(
            df_topic, df_invest,
            on='Name',
            suffixes=('_demo', '_invest')
        )
        
        last_year = '2024'
        x_col = f"{last_year}_demo"
        y_col = f"{last_year}_invest"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if x_col not in merged_df.columns or y_col not in merged_df.columns:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            # Scatter plot
            fig = px.scatter(
                merged_df,
                x=x_col,
                y=y_col,
                hover_name="Name",
                trendline="ols",
                labels={
                    x_col: f"{selected_topic} ({last_year})",
                    y_col: f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ({last_year})"
                },
                color_discrete_sequence=["#3498db"]
            )
            
            # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
            if selected_location in merged_df['Name'].values:
                selected_data = merged_df[merged_df['Name'] == selected_location]
                fig.add_trace(go.Scatter(
                    x=selected_data[x_col],
                    y=selected_data[y_col],
                    name=selected_location,
                    mode='markers',
                    marker=dict(size=12, color='#e74c3c')
                ))
            
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
            
            # –†–∞—Å—á—ë—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            corr = merged_df[x_col].corr(merged_df[y_col])
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            interpretation = ""
            if corr > 0.7:
                interpretation = "üîπ –°–∏–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è —Å–≤—è–∑—å"
            elif corr > 0.3:
                interpretation = "üî∏ –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä—è–º–∞—è —Å–≤—è–∑—å"
            elif corr < -0.7:
                interpretation = "üî∫ –°–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
            elif corr < -0.3:
                interpretation = "üîª –£–º–µ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
            else:
                interpretation = "‚ñ´Ô∏è –°–ª–∞–±–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å"
            
            st.info(f"""
            **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ü–∏—Ä—Å–æ–Ω): {corr:.2f}**  
            {interpretation}
            """)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")

# 5. –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
with st.expander("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", expanded=False):
    tab1, tab2 = st.tabs(["CSV", "Excel"])
    
    with tab1:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=df_topic.to_csv(index=False).encode('utf-8'),
            file_name=f"{selected_topic}_data.csv",
            mime="text/csv"
        )
    
    with tab2:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_topic.to_excel(writer, sheet_name=selected_topic[:30])
            loaded_data["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"].to_excel(writer, sheet_name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä (Excel)",
            data=output.getvalue(),
            file_name="–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è_–∏_–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #7f8c8d">
    <p>üîÆ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ | –û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å | {year}</p>
</div>
""".format(year=datetime.now().year), unsafe_allow_html=True)
